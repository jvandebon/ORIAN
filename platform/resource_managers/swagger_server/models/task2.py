# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Task2(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, task_name: str=None, impl_name: str=None, configuration: object=None):  # noqa: E501
        """Task2 - a model defined in Swagger

        :param task_name: The task_name of this Task2.  # noqa: E501
        :type task_name: str
        :param impl_name: The impl_name of this Task2.  # noqa: E501
        :type impl_name: str
        :param configuration: The configuration of this Task2.  # noqa: E501
        :type configuration: object
        """
        self.swagger_types = {
            'task_name': str,
            'impl_name': str,
            'configuration': object
        }

        self.attribute_map = {
            'task_name': 'taskName',
            'impl_name': 'implName',
            'configuration': 'configuration'
        }

        self._task_name = task_name
        self._impl_name = impl_name
        self._configuration = configuration

    @classmethod
    def from_dict(cls, dikt) -> 'Task2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The task_2 of this Task2.  # noqa: E501
        :rtype: Task2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_name(self) -> str:
        """Gets the task_name of this Task2.


        :return: The task_name of this Task2.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name: str):
        """Sets the task_name of this Task2.


        :param task_name: The task_name of this Task2.
        :type task_name: str
        """
        if task_name is None:
            raise ValueError("Invalid value for `task_name`, must not be `None`")  # noqa: E501

        self._task_name = task_name

    @property
    def impl_name(self) -> str:
        """Gets the impl_name of this Task2.


        :return: The impl_name of this Task2.
        :rtype: str
        """
        return self._impl_name

    @impl_name.setter
    def impl_name(self, impl_name: str):
        """Sets the impl_name of this Task2.


        :param impl_name: The impl_name of this Task2.
        :type impl_name: str
        """

        self._impl_name = impl_name

    @property
    def configuration(self) -> object:
        """Gets the configuration of this Task2.


        :return: The configuration of this Task2.
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration: object):
        """Sets the configuration of this Task2.


        :param configuration: The configuration of this Task2.
        :type configuration: object
        """

        self._configuration = configuration
